/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT      0
#define SYMBOL       1
#define LOWER        2
#define MAGIC        3
#define FACTORY_TEST 4

/**
* index=(row×NUMBER_OF_COLUMNS)+column
* RC(0, 0) = (0 * 14) + 0
* RC(0, 1) = (0 * 14) + 1
*
* q = 29
* w = 30
* e = 31
* r = 32
*
* a = RC(3, 1) = 43
* s = RC(3, 2) = 44
* d = RC(3, 3) = 45
* f = RC(3, 4) = 46
*
*
* u = 37
* i = 38
* o = 39
* p = 40
* j = RC(3, 9) = 51
* k = RC(3, 10) = 52
* l = RC(3, 11) = 53
* ; = RC(3, 12) = 54

* index=(row×NUMBER_OF_COLUMNS)+column
* t = RC(2, 5) = 2 * 14 + 5
*/
#define P_F1 0
#define P_F2 1
#define P_F3 2
#define P_F4 3
#define P_F5 4
#define P_F6 5
#define P_F7 6
#define P_F8 7
#define P_F9 8
#define P_F10 9
#define P_EQ 10
#define P_1 11
#define P_2 12
#define P_3 13
#define P_4 14
#define P_5 15
#define P_6 16
#define P_7 17
#define P_8 18
#define P_9 19
#define P_0 20
#define P_MINUS 21
#define P_R2C0 22
#define P_Q 23
#define P_W 24
#define P_E 25
#define P_R 26
#define P_T 27
#define P_Y 28
#define P_U 29
#define P_I 30
#define P_O 31
#define P_P 32
#define P_BACKSLASH 33
#define P_ESC 34
#define P_A 35
#define P_S 36
#define P_D 37
#define P_F 38
#define P_G 39
#define P_H 40
#define P_J 41
#define P_K 42
#define P_L 43
#define P_SEMI_COL 44
#define P_S_QUOTE 45
#define P_WAVE 46
#define P_Z 47
#define P_X 48
#define P_C 49
#define P_V 50
#define P_B 51
#define P_N 52
#define P_M 53
#define P_COMMA 54
#define P_DOT 55
#define P_SLASH 56

#define COMBO_TIMEOUT 150
#define MACRO_TAP 10
#define MACRO_WAIT 0

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

	    hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
	        quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
	        hold-trigger-on-release;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };

// GEN_MACRO_START
m_gen_chord_the: m_gen_chord_the {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp E>;
};
m_gen_chord_const: m_gen_chord_const {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp O>, <&kp N>, <&kp S>, <&kp T>;
};
m_gen_chord_let: m_gen_chord_let {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp E>, <&kp T>;
};
m_gen_chord_return: m_gen_chord_return {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp E>, <&kp T>, <&kp U>, <&kp R>, <&kp N>;
};
m_gen_chord_if: m_gen_chord_if {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp I>, <&kp F>;
};
m_gen_chord_for: m_gen_chord_for {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp O>, <&kp R>;
};
m_gen_chord_from: m_gen_chord_from {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp R>, <&kp O>, <&kp M>;
};
m_gen_chord_while: m_gen_chord_while {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp H>, <&kp I>, <&kp L>, <&kp E>;
};
m_gen_chord_his: m_gen_chord_his {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp I>, <&kp S>;
};
m_gen_chord_other: m_gen_chord_other {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp O>, <&kp T>, <&kp H>, <&kp E>, <&kp R>;
};
m_gen_chord_how: m_gen_chord_how {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp O>, <&kp W>;
};
m_gen_chord_hot: m_gen_chord_hot {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp O>, <&kp T>;
};
m_gen_chord_your: m_gen_chord_your {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp Y>, <&kp O>, <&kp U>, <&kp R>;
};
m_gen_chord_you: m_gen_chord_you {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp Y>, <&kp O>, <&kp U>;
};
// GEN_MACRO_END

    };

    combos {
        //
        compatible = "zmk,combos";

        combo_gen_the {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <P_F P_J>;
            bindings = <&caps_word>;
        };


// == GEN_COMBO_START
combo_gen_the {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_E>;
    bindings = <&m_gen_chord_the>;
};
combo_gen_const {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_S P_O>;
    bindings = <&m_gen_chord_const>;
};
combo_gen_let {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_E P_T>;
    bindings = <&m_gen_chord_let>;
};
combo_gen_return {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_E P_U>;
    bindings = <&m_gen_chord_return>;
};
combo_gen_if {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_I P_F>;
    bindings = <&m_gen_chord_if>;
};
combo_gen_for {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_R>;
    bindings = <&m_gen_chord_for>;
};
combo_gen_from {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_O P_M>;
    bindings = <&m_gen_chord_from>;
};
combo_gen_while {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_H P_I>;
    bindings = <&m_gen_chord_while>;
};
combo_gen_his {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_I P_S>;
    bindings = <&m_gen_chord_his>;
};
combo_gen_other {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_O P_H P_T>;
    bindings = <&m_gen_chord_other>;
};
combo_gen_how {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_O>;
    bindings = <&m_gen_chord_how>;
};
combo_gen_hot {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_T>;
    bindings = <&m_gen_chord_hot>;
};
combo_gen_your {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_Y P_R>;
    bindings = <&m_gen_chord_your>;
};
combo_gen_you {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_Y P_U>;
    bindings = <&m_gen_chord_you>;
};
// == GEN_COMBO_END

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
            &kp F1         &kp F2      &kp F3      &kp F4       &kp F5                                                                                          &kp F6       &kp F7      &kp F8      &kp F9        &kp F10
            &none          &kp N1      &kp N2      &kp N3       &kp N4       &kp N5                                                                     &kp N6  &kp N7       &kp N8      &kp N9      &kp N0        &none
            &kp TAB        &kp Q       &kp W       &kp E        &kp R        &kp T                                                                      &kp Y   &kp U        &kp I       &kp O       &kp P         &none
            &kp ESC        &hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHIFT F &kp G                                                                      &kp H   &hm RSHIFT J &hm RCTRL K &hm RALT L  &hm LGUI SEMI &kp SQT
            &none          &kp Z       &kp X       &kp C        &kp V        &kp B   &mo LOWER   &kp LCTRL   &layer_td  &kp LGUI  &kp RCTRL &mo SYMBOL  &kp N   &kp M        &kp COMMA   &kp DOT     &kp FSLH      &none
            &magic MAGIC 0 &none       &none       &none        &kp DELETE           &kp ENTER   &kp TAB     &kp LALT   &kp RALT  &kp RET   &kp SPACE           &kp BSPC     &none       &none       &none         &none
            >;
        };

        symbol_layer {
            bindings = <
            &none          &none         &none         &none      &none                                                                                          &none        &none      &none       &none     &none
            &none          &kp GRAVE     &kp LPAR      &kp RPAR   &kp SEMI    &kp COMMA                                                                 &none    &none        &none      &none       &none     &none
            &kp EXCL       &kp LBRC      &kp SQT       &kp DQT    &kp RBRC    &kp QMARK                                                                 &none    &none        &none      &none       &none     &none
            &kp HASH       &kp CARET     &kp KP_EQUAL  &kp UNDER  &kp DLLR    &kp STAR                                                                  &none    &none        &none      &none       &none     &none
            &kp TILDE      &kp LT        &kp PIPE      &kp MINUS  &kp GT      &kp FSLH   &kp BSLH     &kp DOT     &kp STAR   &none     &none     &none  &none    &none        &none      &none       &none     &none
            &kp AT         &kp AMPS      &kp LBKT      &kp RBKT   &kp PLUS               &kp PRCNT    &kp COLON   &kp SEMI   &none     &none     &none           &none        &none      &none       &none     &none
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_UP                                                                             &kp PRCNT    &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
    };
};
