/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT      0
#define SYMBOL       1
#define LOWER        2
#define MAGIC        3
#define FACTORY_TEST 4

/**
* index=(row×NUMBER_OF_COLUMNS)+column
* RC(0, 0) = (0 * 14) + 0
* RC(0, 1) = (0 * 14) + 1
*
* q = 29
* w = 30
* e = 31
* r = 32
*
* a = RC(3, 1) = 43
* s = RC(3, 2) = 44
* d = RC(3, 3) = 45
* f = RC(3, 4) = 46
*
*
* u = 37
* i = 38
* o = 39
* p = 40
* j = RC(3, 9) = 51
* k = RC(3, 10) = 52
* l = RC(3, 11) = 53
* ; = RC(3, 12) = 54

* index=(row×NUMBER_OF_COLUMNS)+column
* t = RC(2, 5) = 2 * 14 + 5
*/
#define P_F1 0
#define P_F2 1
#define P_F3 2
#define P_F4 3
#define P_F5 4
#define P_F6 5
#define P_F7 6
#define P_F8 7
#define P_F9 8
#define P_F10 9
#define P_EQ 10
#define P_1 11
#define P_2 12
#define P_3 13
#define P_4 14
#define P_5 15
#define P_6 16
#define P_7 17
#define P_8 18
#define P_9 19
#define P_0 20
#define P_MINUS 21
#define P_R2C0 22
#define P_Q 23
#define P_W 24
#define P_E 25
#define P_R 26
#define P_T 27
#define P_Y 28
#define P_U 29
#define P_I 30
#define P_O 31
#define P_P 32
#define P_BACKSLASH 33
#define P_ESC 34
#define P_A 35
#define P_S 36
#define P_D 37
#define P_F 38
#define P_G 39
#define P_H 40
#define P_J 41
#define P_K 42
#define P_L 43
#define P_SEMI_COL 44
#define P_S_QUOTE 45
#define P_WAVE 46
#define P_Z 47
#define P_X 48
#define P_C 49
#define P_V 50
#define P_B 51
#define P_N 52
#define P_M 53
#define P_COMMA 54
#define P_DOT 55
#define P_SLASH 56

#define COMBO_TIMEOUT 150
#define MACRO_TAP 10
#define MACRO_WAIT 0

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

	    hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
	        quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
	        hold-trigger-on-release;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };

m_gen_chord_return: m_gen_chord_return {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp E>, <&kp T>, <&kp U>, <&kp R>, <&kp N>;
};
m_gen_chord_function: m_gen_chord_function {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp U>, <&kp N>, <&kp C>, <&kp T>, <&kp I>, <&kp O>, <&kp N>;
};
m_gen_chord_const: m_gen_chord_const {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp O>, <&kp N>, <&kp S>, <&kp T>;
};
m_gen_chord_import: m_gen_chord_import {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp I>, <&kp M>, <&kp P>, <&kp O>, <&kp R>, <&kp T>;
};
m_gen_chord_include: m_gen_chord_include {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp I>, <&kp N>, <&kp C>, <&kp L>, <&kp U>, <&kp D>, <&kp E>;
};
m_gen_chord_interface: m_gen_chord_interface {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp I>, <&kp N>, <&kp T>, <&kp E>, <&kp R>, <&kp F>, <&kp A>, <&kp C>, <&kp E>;
};
m_gen_chord_struct: m_gen_chord_struct {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp T>, <&kp R>, <&kp U>, <&kp C>, <&kp T>;
};
m_gen_chord_the: m_gen_chord_the {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp E>;
};
m_gen_chord_and: m_gen_chord_and {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp N>, <&kp D>;
};
m_gen_chord_that: m_gen_chord_that {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp A>, <&kp T>;
};
m_gen_chord_for: m_gen_chord_for {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp O>, <&kp R>;
};
m_gen_chord_with: m_gen_chord_with {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp I>, <&kp T>, <&kp H>;
};
m_gen_chord_his: m_gen_chord_his {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp I>, <&kp S>;
};
m_gen_chord_they: m_gen_chord_they {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp E>, <&kp Y>;
};
m_gen_chord_one: m_gen_chord_one {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp O>, <&kp N>, <&kp E>;
};
m_gen_chord_this: m_gen_chord_this {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp I>, <&kp S>;
};
m_gen_chord_from: m_gen_chord_from {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp R>, <&kp O>, <&kp M>;
};
m_gen_chord_hot: m_gen_chord_hot {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp O>, <&kp T>;
};
m_gen_chord_but: m_gen_chord_but {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp U>, <&kp T>;
};
m_gen_chord_some: m_gen_chord_some {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp O>, <&kp M>, <&kp E>;
};
m_gen_chord_what: m_gen_chord_what {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp H>, <&kp A>, <&kp T>;
};
m_gen_chord_there: m_gen_chord_there {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp E>, <&kp R>, <&kp E>;
};
m_gen_chord_can: m_gen_chord_can {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp A>, <&kp N>;
};
m_gen_chord_out: m_gen_chord_out {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp O>, <&kp U>, <&kp T>;
};
m_gen_chord_other: m_gen_chord_other {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp O>, <&kp T>, <&kp H>, <&kp E>, <&kp R>;
};
m_gen_chord_your: m_gen_chord_your {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp Y>, <&kp O>, <&kp U>, <&kp R>;
};
m_gen_chord_when: m_gen_chord_when {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp H>, <&kp E>, <&kp N>;
};
m_gen_chord_word: m_gen_chord_word {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp O>, <&kp R>, <&kp D>;
};
m_gen_chord_how: m_gen_chord_how {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp O>, <&kp W>;
};
m_gen_chord_said: m_gen_chord_said {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp A>, <&kp I>, <&kp D>;
};
m_gen_chord_each: m_gen_chord_each {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp E>, <&kp A>, <&kp C>, <&kp H>;
};
m_gen_chord_she: m_gen_chord_she {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp H>, <&kp E>;
};
m_gen_chord_which: m_gen_chord_which {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp H>, <&kp I>, <&kp C>, <&kp H>;
};
m_gen_chord_their: m_gen_chord_their {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp E>, <&kp I>, <&kp R>;
};
m_gen_chord_time: m_gen_chord_time {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp I>, <&kp M>, <&kp E>;
};
m_gen_chord_way: m_gen_chord_way {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp A>, <&kp Y>;
};
m_gen_chord_about: m_gen_chord_about {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp B>, <&kp O>, <&kp U>, <&kp T>;
};
m_gen_chord_many: m_gen_chord_many {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp A>, <&kp N>, <&kp Y>;
};
m_gen_chord_then: m_gen_chord_then {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp E>, <&kp N>;
};
m_gen_chord_them: m_gen_chord_them {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp E>, <&kp M>;
};
m_gen_chord_would: m_gen_chord_would {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp O>, <&kp U>, <&kp L>, <&kp D>;
};
m_gen_chord_write: m_gen_chord_write {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp R>, <&kp I>, <&kp T>, <&kp E>;
};
m_gen_chord_like: m_gen_chord_like {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp I>, <&kp K>, <&kp E>;
};
m_gen_chord_these: m_gen_chord_these {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp E>, <&kp S>, <&kp E>;
};
m_gen_chord_long: m_gen_chord_long {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp O>, <&kp N>, <&kp G>;
};
m_gen_chord_make: m_gen_chord_make {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp A>, <&kp K>, <&kp E>;
};
m_gen_chord_thing: m_gen_chord_thing {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp I>, <&kp N>, <&kp G>;
};
m_gen_chord_two: m_gen_chord_two {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp W>, <&kp O>;
};
m_gen_chord_more: m_gen_chord_more {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp O>, <&kp R>, <&kp E>;
};
m_gen_chord_day: m_gen_chord_day {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp A>, <&kp Y>;
};
m_gen_chord_could: m_gen_chord_could {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp O>, <&kp U>, <&kp L>, <&kp D>;
};
m_gen_chord_come: m_gen_chord_come {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp O>, <&kp M>, <&kp E>;
};
m_gen_chord_did: m_gen_chord_did {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp I>, <&kp D>;
};
m_gen_chord_sound: m_gen_chord_sound {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp O>, <&kp U>, <&kp N>, <&kp D>;
};
m_gen_chord_most: m_gen_chord_most {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp O>, <&kp S>, <&kp T>;
};
m_gen_chord_number: m_gen_chord_number {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp N>, <&kp U>, <&kp M>, <&kp B>, <&kp E>, <&kp R>;
};
m_gen_chord_know: m_gen_chord_know {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp K>, <&kp N>, <&kp O>, <&kp W>;
};
m_gen_chord_than: m_gen_chord_than {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp A>, <&kp N>;
};
m_gen_chord_call: m_gen_chord_call {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp A>, <&kp L>, <&kp L>;
};
m_gen_chord_first: m_gen_chord_first {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp I>, <&kp R>, <&kp S>, <&kp T>;
};
m_gen_chord_people: m_gen_chord_people {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp E>, <&kp O>, <&kp P>, <&kp L>, <&kp E>;
};
m_gen_chord_may: m_gen_chord_may {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp A>, <&kp Y>;
};
m_gen_chord_down: m_gen_chord_down {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp O>, <&kp W>, <&kp N>;
};
m_gen_chord_side: m_gen_chord_side {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp I>, <&kp D>, <&kp E>;
};
m_gen_chord_been: m_gen_chord_been {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp E>, <&kp E>, <&kp N>;
};
m_gen_chord_now: m_gen_chord_now {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp N>, <&kp O>, <&kp W>;
};
m_gen_chord_find: m_gen_chord_find {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp I>, <&kp N>, <&kp D>;
};
m_gen_chord_work: m_gen_chord_work {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp O>, <&kp R>, <&kp K>;
};
m_gen_chord_take: m_gen_chord_take {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp A>, <&kp K>, <&kp E>;
};
m_gen_chord_place: m_gen_chord_place {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp L>, <&kp A>, <&kp C>, <&kp E>;
};
m_gen_chord_live: m_gen_chord_live {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp I>, <&kp V>, <&kp E>;
};
m_gen_chord_where: m_gen_chord_where {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp H>, <&kp E>, <&kp R>, <&kp E>;
};
m_gen_chord_back: m_gen_chord_back {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp A>, <&kp C>, <&kp K>;
};
m_gen_chord_little: m_gen_chord_little {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp I>, <&kp T>, <&kp T>, <&kp L>, <&kp E>;
};
m_gen_chord_round: m_gen_chord_round {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp O>, <&kp U>, <&kp N>, <&kp D>;
};
m_gen_chord_came: m_gen_chord_came {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp A>, <&kp M>, <&kp E>;
};
m_gen_chord_show: m_gen_chord_show {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp H>, <&kp O>, <&kp W>;
};
m_gen_chord_every: m_gen_chord_every {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp E>, <&kp V>, <&kp E>, <&kp R>, <&kp Y>;
};
m_gen_chord_good: m_gen_chord_good {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp G>, <&kp O>, <&kp O>, <&kp D>;
};
m_gen_chord_give: m_gen_chord_give {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp G>, <&kp I>, <&kp V>, <&kp E>;
};
m_gen_chord_our: m_gen_chord_our {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp O>, <&kp U>, <&kp R>;
};
m_gen_chord_under: m_gen_chord_under {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp U>, <&kp N>, <&kp D>, <&kp E>, <&kp R>;
};
m_gen_chord_name: m_gen_chord_name {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp N>, <&kp A>, <&kp M>, <&kp E>;
};
m_gen_chord_very: m_gen_chord_very {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp V>, <&kp E>, <&kp R>, <&kp Y>;
};
m_gen_chord_through: m_gen_chord_through {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp R>, <&kp O>, <&kp U>, <&kp G>, <&kp H>;
};
m_gen_chord_just: m_gen_chord_just {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp J>, <&kp U>, <&kp S>, <&kp T>;
};
m_gen_chord_much: m_gen_chord_much {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp U>, <&kp C>, <&kp H>;
};
m_gen_chord_say: m_gen_chord_say {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp A>, <&kp Y>;
};
m_gen_chord_help: m_gen_chord_help {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp E>, <&kp L>, <&kp P>;
};
m_gen_chord_low: m_gen_chord_low {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp O>, <&kp W>;
};
m_gen_chord_line: m_gen_chord_line {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp I>, <&kp N>, <&kp E>;
};
m_gen_chord_before: m_gen_chord_before {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp E>, <&kp F>, <&kp O>, <&kp R>, <&kp E>;
};
m_gen_chord_turn: m_gen_chord_turn {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp U>, <&kp R>, <&kp N>;
};
m_gen_chord_cause: m_gen_chord_cause {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp A>, <&kp U>, <&kp S>, <&kp E>;
};
m_gen_chord_same: m_gen_chord_same {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp A>, <&kp M>, <&kp E>;
};
m_gen_chord_mean: m_gen_chord_mean {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp E>, <&kp A>, <&kp N>;
};
m_gen_chord_differ: m_gen_chord_differ {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp I>, <&kp F>, <&kp F>, <&kp E>, <&kp R>;
};
m_gen_chord_move: m_gen_chord_move {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp O>, <&kp V>, <&kp E>;
};
m_gen_chord_right: m_gen_chord_right {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp I>, <&kp G>, <&kp H>, <&kp T>;
};
m_gen_chord_old: m_gen_chord_old {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp O>, <&kp L>, <&kp D>;
};
m_gen_chord_does: m_gen_chord_does {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp O>, <&kp E>, <&kp S>;
};
m_gen_chord_tell: m_gen_chord_tell {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp E>, <&kp L>, <&kp L>;
};
m_gen_chord_sentence: m_gen_chord_sentence {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp E>, <&kp N>, <&kp T>, <&kp E>, <&kp N>, <&kp C>, <&kp E>;
};
m_gen_chord_want: m_gen_chord_want {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp A>, <&kp N>, <&kp T>;
};
m_gen_chord_air: m_gen_chord_air {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp I>, <&kp R>;
};
m_gen_chord_well: m_gen_chord_well {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp E>, <&kp L>, <&kp L>;
};
m_gen_chord_also: m_gen_chord_also {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp L>, <&kp S>, <&kp O>;
};
m_gen_chord_play: m_gen_chord_play {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp L>, <&kp A>, <&kp Y>;
};
m_gen_chord_small: m_gen_chord_small {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp M>, <&kp A>, <&kp L>, <&kp L>;
};
m_gen_chord_end: m_gen_chord_end {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp E>, <&kp N>, <&kp D>;
};
m_gen_chord_put: m_gen_chord_put {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp U>, <&kp T>;
};
m_gen_chord_home: m_gen_chord_home {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp O>, <&kp M>, <&kp E>;
};
m_gen_chord_hand: m_gen_chord_hand {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp A>, <&kp N>, <&kp D>;
};
m_gen_chord_port: m_gen_chord_port {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp O>, <&kp R>, <&kp T>;
};
m_gen_chord_spell: m_gen_chord_spell {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp P>, <&kp E>, <&kp L>, <&kp L>;
};
m_gen_chord_even: m_gen_chord_even {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp E>, <&kp V>, <&kp E>, <&kp N>;
};
m_gen_chord_land: m_gen_chord_land {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp A>, <&kp N>, <&kp D>;
};
m_gen_chord_must: m_gen_chord_must {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp U>, <&kp S>, <&kp T>;
};
m_gen_chord_big: m_gen_chord_big {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp I>, <&kp G>;
};
m_gen_chord_high: m_gen_chord_high {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp I>, <&kp G>, <&kp H>;
};
m_gen_chord_such: m_gen_chord_such {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp U>, <&kp C>, <&kp H>;
};
m_gen_chord_follow: m_gen_chord_follow {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp O>, <&kp L>, <&kp L>, <&kp O>, <&kp W>;
};
m_gen_chord_ask: m_gen_chord_ask {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp S>, <&kp K>;
};
m_gen_chord_change: m_gen_chord_change {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp H>, <&kp A>, <&kp N>, <&kp G>, <&kp E>;
};
m_gen_chord_went: m_gen_chord_went {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp E>, <&kp N>, <&kp T>;
};
m_gen_chord_light: m_gen_chord_light {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp I>, <&kp G>, <&kp H>, <&kp T>;
};
m_gen_chord_kind: m_gen_chord_kind {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp K>, <&kp I>, <&kp N>, <&kp D>;
};
m_gen_chord_house: m_gen_chord_house {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp O>, <&kp U>, <&kp S>, <&kp E>;
};
m_gen_chord_picture: m_gen_chord_picture {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp I>, <&kp C>, <&kp T>, <&kp U>, <&kp R>, <&kp E>;
};
m_gen_chord_try: m_gen_chord_try {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp R>, <&kp Y>;
};
m_gen_chord_again: m_gen_chord_again {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp G>, <&kp A>, <&kp I>, <&kp N>;
};
m_gen_chord_animal: m_gen_chord_animal {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp N>, <&kp I>, <&kp M>, <&kp A>, <&kp L>;
};
m_gen_chord_point: m_gen_chord_point {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp O>, <&kp I>, <&kp N>, <&kp T>;
};
m_gen_chord_mother: m_gen_chord_mother {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp O>, <&kp T>, <&kp H>, <&kp E>, <&kp R>;
};
m_gen_chord_world: m_gen_chord_world {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp O>, <&kp R>, <&kp L>, <&kp D>;
};
m_gen_chord_build: m_gen_chord_build {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp U>, <&kp I>, <&kp L>, <&kp D>;
};
m_gen_chord_self: m_gen_chord_self {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp E>, <&kp L>, <&kp F>;
};
m_gen_chord_earth: m_gen_chord_earth {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp E>, <&kp A>, <&kp R>, <&kp T>, <&kp H>;
};
m_gen_chord_father: m_gen_chord_father {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp A>, <&kp T>, <&kp H>, <&kp E>, <&kp R>;
};
m_gen_chord_stand: m_gen_chord_stand {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp T>, <&kp A>, <&kp N>, <&kp D>;
};
m_gen_chord_should: m_gen_chord_should {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp H>, <&kp O>, <&kp U>, <&kp L>, <&kp D>;
};
m_gen_chord_found: m_gen_chord_found {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp O>, <&kp U>, <&kp N>, <&kp D>;
};
m_gen_chord_answer: m_gen_chord_answer {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp N>, <&kp S>, <&kp W>, <&kp E>, <&kp R>;
};
m_gen_chord_school: m_gen_chord_school {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp C>, <&kp H>, <&kp O>, <&kp O>, <&kp L>;
};
m_gen_chord_grow: m_gen_chord_grow {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp G>, <&kp R>, <&kp O>, <&kp W>;
};
m_gen_chord_study: m_gen_chord_study {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp T>, <&kp U>, <&kp D>, <&kp Y>;
};
m_gen_chord_still: m_gen_chord_still {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp T>, <&kp I>, <&kp L>, <&kp L>;
};
m_gen_chord_learn: m_gen_chord_learn {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp E>, <&kp A>, <&kp R>, <&kp N>;
};
m_gen_chord_plant: m_gen_chord_plant {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp L>, <&kp A>, <&kp N>, <&kp T>;
};
m_gen_chord_cover: m_gen_chord_cover {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp O>, <&kp V>, <&kp E>, <&kp R>;
};
m_gen_chord_four: m_gen_chord_four {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp O>, <&kp U>, <&kp R>;
};
m_gen_chord_thought: m_gen_chord_thought {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp O>, <&kp U>, <&kp G>, <&kp H>, <&kp T>;
};
m_gen_chord_keep: m_gen_chord_keep {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp K>, <&kp E>, <&kp E>, <&kp P>;
};
m_gen_chord_eye: m_gen_chord_eye {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp E>, <&kp Y>, <&kp E>;
};
m_gen_chord_between: m_gen_chord_between {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp E>, <&kp T>, <&kp W>, <&kp E>, <&kp E>, <&kp N>;
};
m_gen_chord_city: m_gen_chord_city {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp I>, <&kp T>, <&kp Y>;
};
m_gen_chord_cross: m_gen_chord_cross {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp R>, <&kp O>, <&kp S>, <&kp S>;
};
m_gen_chord_since: m_gen_chord_since {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp I>, <&kp N>, <&kp C>, <&kp E>;
};
m_gen_chord_might: m_gen_chord_might {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp I>, <&kp G>, <&kp H>, <&kp T>;
};
m_gen_chord_story: m_gen_chord_story {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp T>, <&kp O>, <&kp R>, <&kp Y>;
};
m_gen_chord_while: m_gen_chord_while {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp H>, <&kp I>, <&kp L>, <&kp E>;
};
m_gen_chord_close: m_gen_chord_close {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp L>, <&kp O>, <&kp S>, <&kp E>;
};
m_gen_chord_night: m_gen_chord_night {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp N>, <&kp I>, <&kp G>, <&kp H>, <&kp T>;
};
m_gen_chord_real: m_gen_chord_real {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp E>, <&kp A>, <&kp L>;
};
m_gen_chord_life: m_gen_chord_life {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp I>, <&kp F>, <&kp E>;
};
m_gen_chord_stop: m_gen_chord_stop {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp T>, <&kp O>, <&kp P>;
};
m_gen_chord_open: m_gen_chord_open {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp O>, <&kp P>, <&kp E>, <&kp N>;
};
m_gen_chord_seem: m_gen_chord_seem {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp E>, <&kp E>, <&kp M>;
};
m_gen_chord_together: m_gen_chord_together {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp O>, <&kp G>, <&kp E>, <&kp T>, <&kp H>, <&kp E>, <&kp R>;
};
m_gen_chord_white: m_gen_chord_white {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp H>, <&kp I>, <&kp T>, <&kp E>;
};
m_gen_chord_children: m_gen_chord_children {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp H>, <&kp I>, <&kp L>, <&kp D>, <&kp R>, <&kp E>, <&kp N>;
};
m_gen_chord_begin: m_gen_chord_begin {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp E>, <&kp G>, <&kp I>, <&kp N>;
};
m_gen_chord_walk: m_gen_chord_walk {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp A>, <&kp L>, <&kp K>;
};
m_gen_chord_example: m_gen_chord_example {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp E>, <&kp X>, <&kp A>, <&kp M>, <&kp P>, <&kp L>, <&kp E>;
};
m_gen_chord_paper: m_gen_chord_paper {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp A>, <&kp P>, <&kp E>, <&kp R>;
};
m_gen_chord_often: m_gen_chord_often {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp O>, <&kp F>, <&kp T>, <&kp E>, <&kp N>;
};
m_gen_chord_always: m_gen_chord_always {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp L>, <&kp W>, <&kp A>, <&kp Y>, <&kp S>;
};
m_gen_chord_music: m_gen_chord_music {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp U>, <&kp S>, <&kp I>, <&kp C>;
};
m_gen_chord_those: m_gen_chord_those {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp O>, <&kp S>, <&kp E>;
};
m_gen_chord_both: m_gen_chord_both {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp O>, <&kp T>, <&kp H>;
};
m_gen_chord_mark: m_gen_chord_mark {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp A>, <&kp R>, <&kp K>;
};
m_gen_chord_until: m_gen_chord_until {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp U>, <&kp N>, <&kp T>, <&kp I>, <&kp L>;
};
m_gen_chord_mile: m_gen_chord_mile {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp I>, <&kp L>, <&kp E>;
};
m_gen_chord_river: m_gen_chord_river {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp I>, <&kp V>, <&kp E>, <&kp R>;
};
m_gen_chord_second: m_gen_chord_second {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp E>, <&kp C>, <&kp O>, <&kp N>, <&kp D>;
};
m_gen_chord_group: m_gen_chord_group {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp G>, <&kp R>, <&kp O>, <&kp U>, <&kp P>;
};
m_gen_chord_carry: m_gen_chord_carry {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp A>, <&kp R>, <&kp R>, <&kp Y>;
};
m_gen_chord_rain: m_gen_chord_rain {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp A>, <&kp I>, <&kp N>;
};
m_gen_chord_friend: m_gen_chord_friend {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp R>, <&kp I>, <&kp E>, <&kp N>, <&kp D>;
};
m_gen_chord_began: m_gen_chord_began {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp E>, <&kp G>, <&kp A>, <&kp N>;
};
m_gen_chord_fish: m_gen_chord_fish {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp I>, <&kp S>, <&kp H>;
};
m_gen_chord_mountain: m_gen_chord_mountain {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp O>, <&kp U>, <&kp N>, <&kp T>, <&kp A>, <&kp I>, <&kp N>;
};
m_gen_chord_north: m_gen_chord_north {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp N>, <&kp O>, <&kp R>, <&kp T>, <&kp H>;
};
m_gen_chord_once: m_gen_chord_once {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp O>, <&kp N>, <&kp C>, <&kp E>;
};
m_gen_chord_horse: m_gen_chord_horse {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp O>, <&kp R>, <&kp S>, <&kp E>;
};
m_gen_chord_cut: m_gen_chord_cut {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp U>, <&kp T>;
};
m_gen_chord_sure: m_gen_chord_sure {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp U>, <&kp R>, <&kp E>;
};
m_gen_chord_watch: m_gen_chord_watch {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp A>, <&kp T>, <&kp C>, <&kp H>;
};
m_gen_chord_color: m_gen_chord_color {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp O>, <&kp L>, <&kp O>, <&kp R>;
};
m_gen_chord_main: m_gen_chord_main {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp A>, <&kp I>, <&kp N>;
};
m_gen_chord_enough: m_gen_chord_enough {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp E>, <&kp N>, <&kp O>, <&kp U>, <&kp G>, <&kp H>;
};
m_gen_chord_plain: m_gen_chord_plain {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp L>, <&kp A>, <&kp I>, <&kp N>;
};
m_gen_chord_girl: m_gen_chord_girl {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp G>, <&kp I>, <&kp R>, <&kp L>;
};
m_gen_chord_usual: m_gen_chord_usual {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp U>, <&kp S>, <&kp U>, <&kp A>, <&kp L>;
};
m_gen_chord_young: m_gen_chord_young {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp Y>, <&kp O>, <&kp U>, <&kp N>, <&kp G>;
};
m_gen_chord_ready: m_gen_chord_ready {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp E>, <&kp A>, <&kp D>, <&kp Y>;
};
m_gen_chord_above: m_gen_chord_above {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp B>, <&kp O>, <&kp V>, <&kp E>;
};
m_gen_chord_list: m_gen_chord_list {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp I>, <&kp S>, <&kp T>;
};
m_gen_chord_though: m_gen_chord_though {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp O>, <&kp U>, <&kp G>, <&kp H>;
};
m_gen_chord_feel: m_gen_chord_feel {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp E>, <&kp E>, <&kp L>;
};
m_gen_chord_talk: m_gen_chord_talk {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp A>, <&kp L>, <&kp K>;
};
m_gen_chord_bird: m_gen_chord_bird {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp I>, <&kp R>, <&kp D>;
};
m_gen_chord_body: m_gen_chord_body {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp O>, <&kp D>, <&kp Y>;
};
m_gen_chord_family: m_gen_chord_family {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp A>, <&kp M>, <&kp I>, <&kp L>, <&kp Y>;
};
m_gen_chord_direct: m_gen_chord_direct {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp I>, <&kp R>, <&kp E>, <&kp C>, <&kp T>;
};
m_gen_chord_pose: m_gen_chord_pose {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp O>, <&kp S>, <&kp E>;
};
m_gen_chord_song: m_gen_chord_song {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp O>, <&kp N>, <&kp G>;
};
m_gen_chord_measure: m_gen_chord_measure {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp E>, <&kp A>, <&kp S>, <&kp U>, <&kp R>, <&kp E>;
};
m_gen_chord_product: m_gen_chord_product {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp R>, <&kp O>, <&kp D>, <&kp U>, <&kp C>, <&kp T>;
};
m_gen_chord_black: m_gen_chord_black {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp L>, <&kp A>, <&kp C>, <&kp K>;
};
m_gen_chord_short: m_gen_chord_short {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp H>, <&kp O>, <&kp R>, <&kp T>;
};
m_gen_chord_numeral: m_gen_chord_numeral {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp N>, <&kp U>, <&kp M>, <&kp E>, <&kp R>, <&kp A>, <&kp L>;
};
m_gen_chord_class: m_gen_chord_class {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp L>, <&kp A>, <&kp S>, <&kp S>;
};
m_gen_chord_wind: m_gen_chord_wind {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp I>, <&kp N>, <&kp D>;
};
m_gen_chord_question: m_gen_chord_question {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp Q>, <&kp U>, <&kp E>, <&kp S>, <&kp T>, <&kp I>, <&kp O>, <&kp N>;
};
m_gen_chord_happen: m_gen_chord_happen {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp A>, <&kp P>, <&kp P>, <&kp E>, <&kp N>;
};
m_gen_chord_complete: m_gen_chord_complete {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp O>, <&kp M>, <&kp P>, <&kp L>, <&kp E>, <&kp T>, <&kp E>;
};
m_gen_chord_half: m_gen_chord_half {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp A>, <&kp L>, <&kp F>;
};
m_gen_chord_rock: m_gen_chord_rock {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp O>, <&kp C>, <&kp K>;
};
m_gen_chord_fire: m_gen_chord_fire {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp I>, <&kp R>, <&kp E>;
};
m_gen_chord_south: m_gen_chord_south {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp O>, <&kp U>, <&kp T>, <&kp H>;
};
m_gen_chord_problem: m_gen_chord_problem {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp R>, <&kp O>, <&kp B>, <&kp L>, <&kp E>, <&kp M>;
};
m_gen_chord_piece: m_gen_chord_piece {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp I>, <&kp E>, <&kp C>, <&kp E>;
};
m_gen_chord_told: m_gen_chord_told {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp O>, <&kp L>, <&kp D>;
};
m_gen_chord_knew: m_gen_chord_knew {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp K>, <&kp N>, <&kp E>, <&kp W>;
};
m_gen_chord_farm: m_gen_chord_farm {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp A>, <&kp R>, <&kp M>;
};
m_gen_chord_whole: m_gen_chord_whole {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp H>, <&kp O>, <&kp L>, <&kp E>;
};
m_gen_chord_king: m_gen_chord_king {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp K>, <&kp I>, <&kp N>, <&kp G>;
};
m_gen_chord_size: m_gen_chord_size {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp I>, <&kp Z>, <&kp E>;
};
m_gen_chord_hour: m_gen_chord_hour {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp O>, <&kp U>, <&kp R>;
};
m_gen_chord_during: m_gen_chord_during {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp U>, <&kp R>, <&kp I>, <&kp N>, <&kp G>;
};
m_gen_chord_hundred: m_gen_chord_hundred {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp U>, <&kp N>, <&kp D>, <&kp R>, <&kp E>, <&kp D>;
};
m_gen_chord_remember: m_gen_chord_remember {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp E>, <&kp M>, <&kp E>, <&kp M>, <&kp B>, <&kp E>, <&kp R>;
};
m_gen_chord_step: m_gen_chord_step {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp T>, <&kp E>, <&kp P>;
};
m_gen_chord_early: m_gen_chord_early {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp E>, <&kp A>, <&kp R>, <&kp L>, <&kp Y>;
};
m_gen_chord_hold: m_gen_chord_hold {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp H>, <&kp O>, <&kp L>, <&kp D>;
};
m_gen_chord_ground: m_gen_chord_ground {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp G>, <&kp R>, <&kp O>, <&kp U>, <&kp N>, <&kp D>;
};
m_gen_chord_interest: m_gen_chord_interest {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp I>, <&kp N>, <&kp T>, <&kp E>, <&kp R>, <&kp E>, <&kp S>, <&kp T>;
};
m_gen_chord_reach: m_gen_chord_reach {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp E>, <&kp A>, <&kp C>, <&kp H>;
};
m_gen_chord_five: m_gen_chord_five {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp I>, <&kp V>, <&kp E>;
};
m_gen_chord_sing: m_gen_chord_sing {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp I>, <&kp N>, <&kp G>;
};
m_gen_chord_listen: m_gen_chord_listen {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp I>, <&kp S>, <&kp T>, <&kp E>, <&kp N>;
};
m_gen_chord_six: m_gen_chord_six {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp I>, <&kp X>;
};
m_gen_chord_table: m_gen_chord_table {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp A>, <&kp B>, <&kp L>, <&kp E>;
};
m_gen_chord_travel: m_gen_chord_travel {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp R>, <&kp A>, <&kp V>, <&kp E>, <&kp L>;
};
m_gen_chord_morning: m_gen_chord_morning {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp O>, <&kp R>, <&kp N>, <&kp I>, <&kp N>, <&kp G>;
};
m_gen_chord_ten: m_gen_chord_ten {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp E>, <&kp N>;
};
m_gen_chord_simple: m_gen_chord_simple {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp I>, <&kp M>, <&kp P>, <&kp L>, <&kp E>;
};
m_gen_chord_several: m_gen_chord_several {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp E>, <&kp V>, <&kp E>, <&kp R>, <&kp A>, <&kp L>;
};
m_gen_chord_vowel: m_gen_chord_vowel {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp V>, <&kp O>, <&kp W>, <&kp E>, <&kp L>;
};
m_gen_chord_toward: m_gen_chord_toward {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp O>, <&kp W>, <&kp A>, <&kp R>, <&kp D>;
};
m_gen_chord_lay: m_gen_chord_lay {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp A>, <&kp Y>;
};
m_gen_chord_against: m_gen_chord_against {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp G>, <&kp A>, <&kp I>, <&kp N>, <&kp S>, <&kp T>;
};
m_gen_chord_pattern: m_gen_chord_pattern {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp A>, <&kp T>, <&kp T>, <&kp E>, <&kp R>, <&kp N>;
};
m_gen_chord_slow: m_gen_chord_slow {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp L>, <&kp O>, <&kp W>;
};
m_gen_chord_center: m_gen_chord_center {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp E>, <&kp N>, <&kp T>, <&kp E>, <&kp R>;
};
m_gen_chord_love: m_gen_chord_love {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp O>, <&kp V>, <&kp E>;
};
m_gen_chord_person: m_gen_chord_person {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp E>, <&kp R>, <&kp S>, <&kp O>, <&kp N>;
};
m_gen_chord_money: m_gen_chord_money {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp O>, <&kp N>, <&kp E>, <&kp Y>;
};
m_gen_chord_road: m_gen_chord_road {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp O>, <&kp A>, <&kp D>;
};
m_gen_chord_map: m_gen_chord_map {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp A>, <&kp P>;
};
m_gen_chord_science: m_gen_chord_science {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp C>, <&kp I>, <&kp E>, <&kp N>, <&kp C>, <&kp E>;
};
m_gen_chord_rule: m_gen_chord_rule {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp U>, <&kp L>, <&kp E>;
};
m_gen_chord_govern: m_gen_chord_govern {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp G>, <&kp O>, <&kp V>, <&kp E>, <&kp R>, <&kp N>;
};
m_gen_chord_cold: m_gen_chord_cold {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp O>, <&kp L>, <&kp D>;
};
m_gen_chord_notice: m_gen_chord_notice {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp N>, <&kp O>, <&kp T>, <&kp I>, <&kp C>, <&kp E>;
};
m_gen_chord_voice: m_gen_chord_voice {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp V>, <&kp O>, <&kp I>, <&kp C>, <&kp E>;
};
m_gen_chord_fall: m_gen_chord_fall {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp A>, <&kp L>, <&kp L>;
};
m_gen_chord_power: m_gen_chord_power {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp O>, <&kp W>, <&kp E>, <&kp R>;
};
m_gen_chord_town: m_gen_chord_town {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp O>, <&kp W>, <&kp N>;
};
m_gen_chord_fine: m_gen_chord_fine {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp I>, <&kp N>, <&kp E>;
};
m_gen_chord_certain: m_gen_chord_certain {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp E>, <&kp R>, <&kp T>, <&kp A>, <&kp I>, <&kp N>;
};
m_gen_chord_unit: m_gen_chord_unit {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp U>, <&kp N>, <&kp I>, <&kp T>;
};
m_gen_chord_cry: m_gen_chord_cry {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp R>, <&kp Y>;
};
m_gen_chord_dark: m_gen_chord_dark {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp A>, <&kp R>, <&kp K>;
};
m_gen_chord_machine: m_gen_chord_machine {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp A>, <&kp C>, <&kp H>, <&kp I>, <&kp N>, <&kp E>;
};
m_gen_chord_note: m_gen_chord_note {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp N>, <&kp O>, <&kp T>, <&kp E>;
};
m_gen_chord_wait: m_gen_chord_wait {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp A>, <&kp I>, <&kp T>;
};
m_gen_chord_figure: m_gen_chord_figure {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp I>, <&kp G>, <&kp U>, <&kp R>, <&kp E>;
};
m_gen_chord_box: m_gen_chord_box {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp O>, <&kp X>;
};
m_gen_chord_field: m_gen_chord_field {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp I>, <&kp E>, <&kp L>, <&kp D>;
};
m_gen_chord_correct: m_gen_chord_correct {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp O>, <&kp R>, <&kp R>, <&kp E>, <&kp C>, <&kp T>;
};
m_gen_chord_able: m_gen_chord_able {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp B>, <&kp L>, <&kp E>;
};
m_gen_chord_pound: m_gen_chord_pound {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp O>, <&kp U>, <&kp N>, <&kp D>;
};
m_gen_chord_done: m_gen_chord_done {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp O>, <&kp N>, <&kp E>;
};
m_gen_chord_beauty: m_gen_chord_beauty {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp E>, <&kp A>, <&kp U>, <&kp T>, <&kp Y>;
};
m_gen_chord_drive: m_gen_chord_drive {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp R>, <&kp I>, <&kp V>, <&kp E>;
};
m_gen_chord_stood: m_gen_chord_stood {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp T>, <&kp O>, <&kp O>, <&kp D>;
};
m_gen_chord_contain: m_gen_chord_contain {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp O>, <&kp N>, <&kp T>, <&kp A>, <&kp I>, <&kp N>;
};
m_gen_chord_front: m_gen_chord_front {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp R>, <&kp O>, <&kp N>, <&kp T>;
};
m_gen_chord_teach: m_gen_chord_teach {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp E>, <&kp A>, <&kp C>, <&kp H>;
};
m_gen_chord_week: m_gen_chord_week {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp E>, <&kp E>, <&kp K>;
};
m_gen_chord_final: m_gen_chord_final {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp I>, <&kp N>, <&kp A>, <&kp L>;
};
m_gen_chord_green: m_gen_chord_green {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp G>, <&kp R>, <&kp E>, <&kp E>, <&kp N>;
};
m_gen_chord_quick: m_gen_chord_quick {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp Q>, <&kp U>, <&kp I>, <&kp C>, <&kp K>;
};
m_gen_chord_develop: m_gen_chord_develop {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp E>, <&kp V>, <&kp E>, <&kp L>, <&kp O>, <&kp P>;
};
m_gen_chord_sleep: m_gen_chord_sleep {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp L>, <&kp E>, <&kp E>, <&kp P>;
};
m_gen_chord_warm: m_gen_chord_warm {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp A>, <&kp R>, <&kp M>;
};
m_gen_chord_minute: m_gen_chord_minute {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp I>, <&kp N>, <&kp U>, <&kp T>, <&kp E>;
};
m_gen_chord_strong: m_gen_chord_strong {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp T>, <&kp R>, <&kp O>, <&kp N>, <&kp G>;
};
m_gen_chord_special: m_gen_chord_special {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp P>, <&kp E>, <&kp C>, <&kp I>, <&kp A>, <&kp L>;
};
m_gen_chord_mind: m_gen_chord_mind {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp I>, <&kp N>, <&kp D>;
};
m_gen_chord_behind: m_gen_chord_behind {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp E>, <&kp H>, <&kp I>, <&kp N>, <&kp D>;
};
m_gen_chord_clear: m_gen_chord_clear {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp L>, <&kp E>, <&kp A>, <&kp R>;
};
m_gen_chord_tail: m_gen_chord_tail {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp A>, <&kp I>, <&kp L>;
};
m_gen_chord_produce: m_gen_chord_produce {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp R>, <&kp O>, <&kp D>, <&kp U>, <&kp C>, <&kp E>;
};
m_gen_chord_lot: m_gen_chord_lot {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp O>, <&kp T>;
};
m_gen_chord_nothing: m_gen_chord_nothing {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp N>, <&kp O>, <&kp T>, <&kp H>, <&kp I>, <&kp N>, <&kp G>;
};
m_gen_chord_course: m_gen_chord_course {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp O>, <&kp U>, <&kp R>, <&kp S>, <&kp E>;
};
m_gen_chord_stay: m_gen_chord_stay {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp T>, <&kp A>, <&kp Y>;
};
m_gen_chord_wheel: m_gen_chord_wheel {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp H>, <&kp E>, <&kp E>, <&kp L>;
};
m_gen_chord_force: m_gen_chord_force {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp O>, <&kp R>, <&kp C>, <&kp E>;
};
m_gen_chord_blue: m_gen_chord_blue {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp L>, <&kp U>, <&kp E>;
};
m_gen_chord_object: m_gen_chord_object {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp O>, <&kp B>, <&kp J>, <&kp E>, <&kp C>, <&kp T>;
};
m_gen_chord_decide: m_gen_chord_decide {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp E>, <&kp C>, <&kp I>, <&kp D>, <&kp E>;
};
m_gen_chord_surface: m_gen_chord_surface {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp U>, <&kp R>, <&kp F>, <&kp A>, <&kp C>, <&kp E>;
};
m_gen_chord_deep: m_gen_chord_deep {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp E>, <&kp E>, <&kp P>;
};
m_gen_chord_foot: m_gen_chord_foot {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp F>, <&kp O>, <&kp O>, <&kp T>;
};
m_gen_chord_busy: m_gen_chord_busy {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp U>, <&kp S>, <&kp Y>;
};
m_gen_chord_record: m_gen_chord_record {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp E>, <&kp C>, <&kp O>, <&kp R>, <&kp D>;
};
m_gen_chord_possible: m_gen_chord_possible {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp O>, <&kp S>, <&kp S>, <&kp I>, <&kp B>, <&kp L>, <&kp E>;
};
m_gen_chord_plane: m_gen_chord_plane {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp L>, <&kp A>, <&kp N>, <&kp E>;
};
m_gen_chord_dry: m_gen_chord_dry {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp D>, <&kp R>, <&kp Y>;
};
m_gen_chord_wonder: m_gen_chord_wonder {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp O>, <&kp N>, <&kp D>, <&kp E>, <&kp R>;
};
m_gen_chord_thousand: m_gen_chord_thousand {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp T>, <&kp H>, <&kp O>, <&kp U>, <&kp S>, <&kp A>, <&kp N>, <&kp D>;
};
m_gen_chord_ago: m_gen_chord_ago {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp G>, <&kp O>;
};
m_gen_chord_ran: m_gen_chord_ran {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp R>, <&kp A>, <&kp N>;
};
m_gen_chord_check: m_gen_chord_check {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp C>, <&kp H>, <&kp E>, <&kp C>, <&kp K>;
};
m_gen_chord_game: m_gen_chord_game {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp G>, <&kp A>, <&kp M>, <&kp E>;
};
m_gen_chord_shape: m_gen_chord_shape {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp H>, <&kp A>, <&kp P>, <&kp E>;
};
m_gen_chord_miss: m_gen_chord_miss {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp M>, <&kp I>, <&kp S>, <&kp S>;
};
m_gen_chord_brought: m_gen_chord_brought {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp R>, <&kp O>, <&kp U>, <&kp G>, <&kp H>, <&kp T>;
};
m_gen_chord_snow: m_gen_chord_snow {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp S>, <&kp N>, <&kp O>, <&kp W>;
};
m_gen_chord_bring: m_gen_chord_bring {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp B>, <&kp R>, <&kp I>, <&kp N>, <&kp G>;
};
m_gen_chord_perhaps: m_gen_chord_perhaps {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp P>, <&kp E>, <&kp R>, <&kp H>, <&kp A>, <&kp P>, <&kp S>;
};
m_gen_chord_weight: m_gen_chord_weight {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp W>, <&kp E>, <&kp I>, <&kp G>, <&kp H>, <&kp T>;
};
m_gen_chord_language: m_gen_chord_language {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp L>, <&kp A>, <&kp N>, <&kp G>, <&kp U>, <&kp A>, <&kp G>, <&kp E>;
};
m_gen_chord_among: m_gen_chord_among {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings = <&kp A>, <&kp M>, <&kp O>, <&kp N>, <&kp G>;
};
        
        m_the: m_the {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T>, <&kp H>, <&kp E>;
        };
    };

    combos {
        //
        compatible = "zmk,combos";

combo_gen_return {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_E P_U>;
    bindings = <&m_gen_chord_return>;
};
combo_gen_function {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_U P_C>;
    bindings = <&m_gen_chord_function>;
};
combo_gen_const {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_O P_S>;
    bindings = <&m_gen_chord_const>;
};
combo_gen_import {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_I P_M P_R>;
    bindings = <&m_gen_chord_import>;
};
combo_gen_include {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_I P_N P_C>;
    bindings = <&m_gen_chord_include>;
};
combo_gen_interface {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_I P_N P_T>;
    bindings = <&m_gen_chord_interface>;
};
combo_gen_struct {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_T P_U>;
    bindings = <&m_gen_chord_struct>;
};
combo_gen_the {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_E>;
    bindings = <&m_gen_chord_the>;
};
combo_gen_and {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_N P_D>;
    bindings = <&m_gen_chord_and>;
};
combo_gen_that {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_A>;
    bindings = <&m_gen_chord_that>;
};
combo_gen_for {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_O P_R>;
    bindings = <&m_gen_chord_for>;
};
combo_gen_with {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_I P_T>;
    bindings = <&m_gen_chord_with>;
};
combo_gen_his {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_I P_S>;
    bindings = <&m_gen_chord_his>;
};
combo_gen_they {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_E P_Y>;
    bindings = <&m_gen_chord_they>;
};
combo_gen_one {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_O P_N P_E>;
    bindings = <&m_gen_chord_one>;
};
combo_gen_this {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_S>;
    bindings = <&m_gen_chord_this>;
};
combo_gen_from {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_R P_O P_M>;
    bindings = <&m_gen_chord_from>;
};
combo_gen_hot {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_O P_T>;
    bindings = <&m_gen_chord_hot>;
};
combo_gen_but {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_U P_T>;
    bindings = <&m_gen_chord_but>;
};
combo_gen_some {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_O P_E>;
    bindings = <&m_gen_chord_some>;
};
combo_gen_what {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_H P_A>;
    bindings = <&m_gen_chord_what>;
};
combo_gen_there {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_E P_R>;
    bindings = <&m_gen_chord_there>;
};
combo_gen_can {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_A P_N>;
    bindings = <&m_gen_chord_can>;
};
combo_gen_out {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_O P_U P_T>;
    bindings = <&m_gen_chord_out>;
};
combo_gen_other {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_O P_T P_H P_E>;
    bindings = <&m_gen_chord_other>;
};
combo_gen_your {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_Y P_O P_R>;
    bindings = <&m_gen_chord_your>;
};
combo_gen_when {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_H P_E>;
    bindings = <&m_gen_chord_when>;
};
combo_gen_word {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_O P_R>;
    bindings = <&m_gen_chord_word>;
};
combo_gen_how {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_O P_W>;
    bindings = <&m_gen_chord_how>;
};
combo_gen_said {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_A P_I>;
    bindings = <&m_gen_chord_said>;
};
combo_gen_each {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_E P_A P_H>;
    bindings = <&m_gen_chord_each>;
};
combo_gen_she {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_H P_E>;
    bindings = <&m_gen_chord_she>;
};
combo_gen_which {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_H P_C>;
    bindings = <&m_gen_chord_which>;
};
combo_gen_their {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_E P_I>;
    bindings = <&m_gen_chord_their>;
};
combo_gen_time {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_I P_E>;
    bindings = <&m_gen_chord_time>;
};
combo_gen_way {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_A P_Y>;
    bindings = <&m_gen_chord_way>;
};
combo_gen_about {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_B P_O>;
    bindings = <&m_gen_chord_about>;
};
combo_gen_many {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_A P_N>;
    bindings = <&m_gen_chord_many>;
};
combo_gen_then {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_E P_N>;
    bindings = <&m_gen_chord_then>;
};
combo_gen_them {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_E P_M>;
    bindings = <&m_gen_chord_them>;
};
combo_gen_would {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_O P_D>;
    bindings = <&m_gen_chord_would>;
};
combo_gen_write {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_R P_I>;
    bindings = <&m_gen_chord_write>;
};
combo_gen_like {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_I P_E>;
    bindings = <&m_gen_chord_like>;
};
combo_gen_these {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_E P_S>;
    bindings = <&m_gen_chord_these>;
};
combo_gen_long {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_O P_G>;
    bindings = <&m_gen_chord_long>;
};
combo_gen_make {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_A P_K>;
    bindings = <&m_gen_chord_make>;
};
combo_gen_thing {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_G>;
    bindings = <&m_gen_chord_thing>;
};
combo_gen_two {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_W P_O>;
    bindings = <&m_gen_chord_two>;
};
combo_gen_more {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_O P_R>;
    bindings = <&m_gen_chord_more>;
};
combo_gen_day {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_A P_Y>;
    bindings = <&m_gen_chord_day>;
};
combo_gen_could {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_O P_D>;
    bindings = <&m_gen_chord_could>;
};
combo_gen_come {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_O P_E>;
    bindings = <&m_gen_chord_come>;
};
combo_gen_did {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_I>;
    bindings = <&m_gen_chord_did>;
};
combo_gen_sound {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_O P_D>;
    bindings = <&m_gen_chord_sound>;
};
combo_gen_most {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_O P_S>;
    bindings = <&m_gen_chord_most>;
};
combo_gen_number {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_N P_U P_B>;
    bindings = <&m_gen_chord_number>;
};
combo_gen_know {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_K P_N P_W>;
    bindings = <&m_gen_chord_know>;
};
combo_gen_than {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_A P_N>;
    bindings = <&m_gen_chord_than>;
};
combo_gen_call {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_A P_L>;
    bindings = <&m_gen_chord_call>;
};
combo_gen_first {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_I P_R>;
    bindings = <&m_gen_chord_first>;
};
combo_gen_people {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_E P_O>;
    bindings = <&m_gen_chord_people>;
};
combo_gen_may {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_A P_Y>;
    bindings = <&m_gen_chord_may>;
};
combo_gen_down {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_O P_W P_N>;
    bindings = <&m_gen_chord_down>;
};
combo_gen_side {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_I P_D>;
    bindings = <&m_gen_chord_side>;
};
combo_gen_been {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_E P_N>;
    bindings = <&m_gen_chord_been>;
};
combo_gen_now {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_N P_O P_W>;
    bindings = <&m_gen_chord_now>;
};
combo_gen_find {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_I P_D>;
    bindings = <&m_gen_chord_find>;
};
combo_gen_work {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_O P_R P_K>;
    bindings = <&m_gen_chord_work>;
};
combo_gen_take {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_A P_K>;
    bindings = <&m_gen_chord_take>;
};
combo_gen_place {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_L P_A>;
    bindings = <&m_gen_chord_place>;
};
combo_gen_live {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_I P_V>;
    bindings = <&m_gen_chord_live>;
};
combo_gen_where {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_H P_E P_R>;
    bindings = <&m_gen_chord_where>;
};
combo_gen_back {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_A P_K>;
    bindings = <&m_gen_chord_back>;
};
combo_gen_little {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_I P_T>;
    bindings = <&m_gen_chord_little>;
};
combo_gen_round {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_O P_D>;
    bindings = <&m_gen_chord_round>;
};
combo_gen_came {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_A P_M>;
    bindings = <&m_gen_chord_came>;
};
combo_gen_show {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_H P_W>;
    bindings = <&m_gen_chord_show>;
};
combo_gen_every {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_E P_V P_Y>;
    bindings = <&m_gen_chord_every>;
};
combo_gen_good {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_G P_O P_D>;
    bindings = <&m_gen_chord_good>;
};
combo_gen_give {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_G P_I P_V>;
    bindings = <&m_gen_chord_give>;
};
combo_gen_our {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_O P_U P_R>;
    bindings = <&m_gen_chord_our>;
};
combo_gen_under {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_U P_N P_D>;
    bindings = <&m_gen_chord_under>;
};
combo_gen_name {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_N P_A P_M P_E>;
    bindings = <&m_gen_chord_name>;
};
combo_gen_very {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_V P_E P_R P_Y>;
    bindings = <&m_gen_chord_very>;
};
combo_gen_through {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_R>;
    bindings = <&m_gen_chord_through>;
};
combo_gen_just {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_J P_U P_S>;
    bindings = <&m_gen_chord_just>;
};
combo_gen_much {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_U P_C>;
    bindings = <&m_gen_chord_much>;
};
combo_gen_say {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_A P_Y>;
    bindings = <&m_gen_chord_say>;
};
combo_gen_help {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_E P_L>;
    bindings = <&m_gen_chord_help>;
};
combo_gen_low {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_O P_W>;
    bindings = <&m_gen_chord_low>;
};
combo_gen_line {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_I P_N P_E>;
    bindings = <&m_gen_chord_line>;
};
combo_gen_before {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_E P_O>;
    bindings = <&m_gen_chord_before>;
};
combo_gen_turn {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_U P_R>;
    bindings = <&m_gen_chord_turn>;
};
combo_gen_cause {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_A P_U>;
    bindings = <&m_gen_chord_cause>;
};
combo_gen_same {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_A P_M>;
    bindings = <&m_gen_chord_same>;
};
combo_gen_mean {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_E P_N>;
    bindings = <&m_gen_chord_mean>;
};
combo_gen_differ {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_I P_F P_E>;
    bindings = <&m_gen_chord_differ>;
};
combo_gen_move {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_O P_V>;
    bindings = <&m_gen_chord_move>;
};
combo_gen_right {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_I P_G>;
    bindings = <&m_gen_chord_right>;
};
combo_gen_old {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_O P_L P_D>;
    bindings = <&m_gen_chord_old>;
};
combo_gen_does {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_O P_E>;
    bindings = <&m_gen_chord_does>;
};
combo_gen_tell {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_E P_L>;
    bindings = <&m_gen_chord_tell>;
};
combo_gen_sentence {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_E P_N>;
    bindings = <&m_gen_chord_sentence>;
};
combo_gen_want {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_A P_N>;
    bindings = <&m_gen_chord_want>;
};
combo_gen_air {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_I P_R>;
    bindings = <&m_gen_chord_air>;
};
combo_gen_well {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_E P_L>;
    bindings = <&m_gen_chord_well>;
};
combo_gen_also {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_L P_S>;
    bindings = <&m_gen_chord_also>;
};
combo_gen_play {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_L P_A P_Y>;
    bindings = <&m_gen_chord_play>;
};
combo_gen_small {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_M P_A P_L>;
    bindings = <&m_gen_chord_small>;
};
combo_gen_end {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_E P_N P_D>;
    bindings = <&m_gen_chord_end>;
};
combo_gen_put {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_U P_T>;
    bindings = <&m_gen_chord_put>;
};
combo_gen_home {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_O P_E>;
    bindings = <&m_gen_chord_home>;
};
combo_gen_hand {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_A P_N>;
    bindings = <&m_gen_chord_hand>;
};
combo_gen_port {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_O P_R>;
    bindings = <&m_gen_chord_port>;
};
combo_gen_spell {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_P P_E>;
    bindings = <&m_gen_chord_spell>;
};
combo_gen_even {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_E P_V P_N>;
    bindings = <&m_gen_chord_even>;
};
combo_gen_land {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_A P_N>;
    bindings = <&m_gen_chord_land>;
};
combo_gen_must {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_U P_S>;
    bindings = <&m_gen_chord_must>;
};
combo_gen_big {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_I P_G>;
    bindings = <&m_gen_chord_big>;
};
combo_gen_high {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_I P_G>;
    bindings = <&m_gen_chord_high>;
};
combo_gen_such {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_U P_C>;
    bindings = <&m_gen_chord_such>;
};
combo_gen_follow {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_O P_W>;
    bindings = <&m_gen_chord_follow>;
};
combo_gen_ask {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_S P_K>;
    bindings = <&m_gen_chord_ask>;
};
combo_gen_change {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_H P_A>;
    bindings = <&m_gen_chord_change>;
};
combo_gen_went {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_E P_N>;
    bindings = <&m_gen_chord_went>;
};
combo_gen_light {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_I P_G>;
    bindings = <&m_gen_chord_light>;
};
combo_gen_kind {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_K P_I P_D>;
    bindings = <&m_gen_chord_kind>;
};
combo_gen_house {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_O P_S>;
    bindings = <&m_gen_chord_house>;
};
combo_gen_picture {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_I P_C>;
    bindings = <&m_gen_chord_picture>;
};
combo_gen_try {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_R P_Y>;
    bindings = <&m_gen_chord_try>;
};
combo_gen_again {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_G P_I>;
    bindings = <&m_gen_chord_again>;
};
combo_gen_animal {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_N P_I>;
    bindings = <&m_gen_chord_animal>;
};
combo_gen_point {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_O P_T>;
    bindings = <&m_gen_chord_point>;
};
combo_gen_mother {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_O P_T>;
    bindings = <&m_gen_chord_mother>;
};
combo_gen_world {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_O P_R P_L>;
    bindings = <&m_gen_chord_world>;
};
combo_gen_build {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_U P_D>;
    bindings = <&m_gen_chord_build>;
};
combo_gen_self {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_E P_L>;
    bindings = <&m_gen_chord_self>;
};
combo_gen_earth {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_E P_A P_R P_H>;
    bindings = <&m_gen_chord_earth>;
};
combo_gen_father {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_A P_H>;
    bindings = <&m_gen_chord_father>;
};
combo_gen_stand {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_T P_N>;
    bindings = <&m_gen_chord_stand>;
};
combo_gen_should {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_H P_D>;
    bindings = <&m_gen_chord_should>;
};
combo_gen_found {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_O P_D>;
    bindings = <&m_gen_chord_found>;
};
combo_gen_answer {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_N P_S>;
    bindings = <&m_gen_chord_answer>;
};
combo_gen_school {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_C P_H>;
    bindings = <&m_gen_chord_school>;
};
combo_gen_grow {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_G P_R P_O>;
    bindings = <&m_gen_chord_grow>;
};
combo_gen_study {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_T P_U P_Y>;
    bindings = <&m_gen_chord_study>;
};
combo_gen_still {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_T P_I>;
    bindings = <&m_gen_chord_still>;
};
combo_gen_learn {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_E P_N>;
    bindings = <&m_gen_chord_learn>;
};
combo_gen_plant {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_L P_A P_N>;
    bindings = <&m_gen_chord_plant>;
};
combo_gen_cover {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_O P_V>;
    bindings = <&m_gen_chord_cover>;
};
combo_gen_four {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_O P_U P_R>;
    bindings = <&m_gen_chord_four>;
};
combo_gen_thought {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_O P_G>;
    bindings = <&m_gen_chord_thought>;
};
combo_gen_keep {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_K P_E P_P>;
    bindings = <&m_gen_chord_keep>;
};
combo_gen_eye {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_E P_Y>;
    bindings = <&m_gen_chord_eye>;
};
combo_gen_between {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_E P_T P_N>;
    bindings = <&m_gen_chord_between>;
};
combo_gen_city {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_I P_T>;
    bindings = <&m_gen_chord_city>;
};
combo_gen_cross {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_R P_O>;
    bindings = <&m_gen_chord_cross>;
};
combo_gen_since {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_I P_C>;
    bindings = <&m_gen_chord_since>;
};
combo_gen_might {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_I P_G>;
    bindings = <&m_gen_chord_might>;
};
combo_gen_story {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_T P_O>;
    bindings = <&m_gen_chord_story>;
};
combo_gen_while {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_H P_I P_E>;
    bindings = <&m_gen_chord_while>;
};
combo_gen_close {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_L P_S>;
    bindings = <&m_gen_chord_close>;
};
combo_gen_night {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_N P_I P_G>;
    bindings = <&m_gen_chord_night>;
};
combo_gen_real {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_E P_L>;
    bindings = <&m_gen_chord_real>;
};
combo_gen_life {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_I P_F>;
    bindings = <&m_gen_chord_life>;
};
combo_gen_stop {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_T P_O P_P>;
    bindings = <&m_gen_chord_stop>;
};
combo_gen_open {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_O P_P P_E P_N>;
    bindings = <&m_gen_chord_open>;
};
combo_gen_seem {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_E P_M>;
    bindings = <&m_gen_chord_seem>;
};
combo_gen_together {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_O P_G>;
    bindings = <&m_gen_chord_together>;
};
combo_gen_white {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_H P_T>;
    bindings = <&m_gen_chord_white>;
};
combo_gen_children {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_H P_D>;
    bindings = <&m_gen_chord_children>;
};
combo_gen_begin {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_E P_I>;
    bindings = <&m_gen_chord_begin>;
};
combo_gen_walk {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_A P_L>;
    bindings = <&m_gen_chord_walk>;
};
combo_gen_example {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_E P_X P_M>;
    bindings = <&m_gen_chord_example>;
};
combo_gen_paper {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_A P_E>;
    bindings = <&m_gen_chord_paper>;
};
combo_gen_often {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_O P_F P_N>;
    bindings = <&m_gen_chord_often>;
};
combo_gen_always {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_L P_W P_Y>;
    bindings = <&m_gen_chord_always>;
};
combo_gen_music {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_U P_S P_I>;
    bindings = <&m_gen_chord_music>;
};
combo_gen_those {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_O P_S>;
    bindings = <&m_gen_chord_those>;
};
combo_gen_both {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_O P_T>;
    bindings = <&m_gen_chord_both>;
};
combo_gen_mark {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_A P_R P_K>;
    bindings = <&m_gen_chord_mark>;
};
combo_gen_until {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_U P_N P_T>;
    bindings = <&m_gen_chord_until>;
};
combo_gen_mile {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_I P_E>;
    bindings = <&m_gen_chord_mile>;
};
combo_gen_river {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_I P_V>;
    bindings = <&m_gen_chord_river>;
};
combo_gen_second {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_E P_O P_N>;
    bindings = <&m_gen_chord_second>;
};
combo_gen_group {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_G P_R P_O P_U>;
    bindings = <&m_gen_chord_group>;
};
combo_gen_carry {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_A P_Y>;
    bindings = <&m_gen_chord_carry>;
};
combo_gen_rain {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_A P_I P_N>;
    bindings = <&m_gen_chord_rain>;
};
combo_gen_friend {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_R P_I P_N>;
    bindings = <&m_gen_chord_friend>;
};
combo_gen_began {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_E P_G P_N>;
    bindings = <&m_gen_chord_began>;
};
combo_gen_fish {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_I P_S>;
    bindings = <&m_gen_chord_fish>;
};
combo_gen_mountain {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_O P_U P_T>;
    bindings = <&m_gen_chord_mountain>;
};
combo_gen_north {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_N P_O P_R>;
    bindings = <&m_gen_chord_north>;
};
combo_gen_once {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_O P_N P_C>;
    bindings = <&m_gen_chord_once>;
};
combo_gen_horse {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_O P_R>;
    bindings = <&m_gen_chord_horse>;
};
combo_gen_cut {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_U P_T>;
    bindings = <&m_gen_chord_cut>;
};
combo_gen_sure {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_U P_R>;
    bindings = <&m_gen_chord_sure>;
};
combo_gen_watch {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_A P_T P_H>;
    bindings = <&m_gen_chord_watch>;
};
combo_gen_color {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_O P_L P_R>;
    bindings = <&m_gen_chord_color>;
};
combo_gen_main {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_A P_I>;
    bindings = <&m_gen_chord_main>;
};
combo_gen_enough {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_E P_N P_G>;
    bindings = <&m_gen_chord_enough>;
};
combo_gen_plain {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_L P_A P_I>;
    bindings = <&m_gen_chord_plain>;
};
combo_gen_girl {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_G P_I P_R P_L>;
    bindings = <&m_gen_chord_girl>;
};
combo_gen_usual {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_U P_S P_L>;
    bindings = <&m_gen_chord_usual>;
};
combo_gen_young {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_Y P_O P_G>;
    bindings = <&m_gen_chord_young>;
};
combo_gen_ready {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_E P_Y>;
    bindings = <&m_gen_chord_ready>;
};
combo_gen_above {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_B P_O P_V>;
    bindings = <&m_gen_chord_above>;
};
combo_gen_list {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_I P_S>;
    bindings = <&m_gen_chord_list>;
};
combo_gen_though {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_O P_U P_G>;
    bindings = <&m_gen_chord_though>;
};
combo_gen_feel {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_E P_L>;
    bindings = <&m_gen_chord_feel>;
};
combo_gen_talk {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_A P_L>;
    bindings = <&m_gen_chord_talk>;
};
combo_gen_bird {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_I P_R>;
    bindings = <&m_gen_chord_bird>;
};
combo_gen_body {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_O P_D>;
    bindings = <&m_gen_chord_body>;
};
combo_gen_family {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_A P_M>;
    bindings = <&m_gen_chord_family>;
};
combo_gen_direct {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_I P_R>;
    bindings = <&m_gen_chord_direct>;
};
combo_gen_pose {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_O P_S>;
    bindings = <&m_gen_chord_pose>;
};
combo_gen_song {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_O P_G>;
    bindings = <&m_gen_chord_song>;
};
combo_gen_measure {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_E P_U>;
    bindings = <&m_gen_chord_measure>;
};
combo_gen_product {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_R P_O P_U>;
    bindings = <&m_gen_chord_product>;
};
combo_gen_black {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_L P_A>;
    bindings = <&m_gen_chord_black>;
};
combo_gen_short {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_H P_R>;
    bindings = <&m_gen_chord_short>;
};
combo_gen_numeral {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_N P_U P_E>;
    bindings = <&m_gen_chord_numeral>;
};
combo_gen_class {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_L P_A P_S>;
    bindings = <&m_gen_chord_class>;
};
combo_gen_wind {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_I P_D>;
    bindings = <&m_gen_chord_wind>;
};
combo_gen_question {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_Q P_U P_E>;
    bindings = <&m_gen_chord_question>;
};
combo_gen_happen {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_A P_P>;
    bindings = <&m_gen_chord_happen>;
};
combo_gen_complete {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_O P_M P_E>;
    bindings = <&m_gen_chord_complete>;
};
combo_gen_half {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_A P_L>;
    bindings = <&m_gen_chord_half>;
};
combo_gen_rock {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_O P_C P_K>;
    bindings = <&m_gen_chord_rock>;
};
combo_gen_fire {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_I P_R P_E>;
    bindings = <&m_gen_chord_fire>;
};
combo_gen_south {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_O P_U P_T>;
    bindings = <&m_gen_chord_south>;
};
combo_gen_problem {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_R P_O P_L>;
    bindings = <&m_gen_chord_problem>;
};
combo_gen_piece {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_I P_E>;
    bindings = <&m_gen_chord_piece>;
};
combo_gen_told {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_O P_L P_D>;
    bindings = <&m_gen_chord_told>;
};
combo_gen_knew {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_K P_N P_E>;
    bindings = <&m_gen_chord_knew>;
};
combo_gen_farm {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_A P_R P_M>;
    bindings = <&m_gen_chord_farm>;
};
combo_gen_whole {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_H P_O P_E>;
    bindings = <&m_gen_chord_whole>;
};
combo_gen_king {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_K P_I P_G>;
    bindings = <&m_gen_chord_king>;
};
combo_gen_size {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_I P_Z>;
    bindings = <&m_gen_chord_size>;
};
combo_gen_hour {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_O P_U P_R>;
    bindings = <&m_gen_chord_hour>;
};
combo_gen_during {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_U P_R>;
    bindings = <&m_gen_chord_during>;
};
combo_gen_hundred {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_U P_D>;
    bindings = <&m_gen_chord_hundred>;
};
combo_gen_remember {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_E P_M>;
    bindings = <&m_gen_chord_remember>;
};
combo_gen_step {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_T P_P>;
    bindings = <&m_gen_chord_step>;
};
combo_gen_early {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_E P_A P_L>;
    bindings = <&m_gen_chord_early>;
};
combo_gen_hold {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_H P_O P_D>;
    bindings = <&m_gen_chord_hold>;
};
combo_gen_ground {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_G P_R P_O P_U P_D>;
    bindings = <&m_gen_chord_ground>;
};
combo_gen_interest {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_I P_N P_T P_E>;
    bindings = <&m_gen_chord_interest>;
};
combo_gen_reach {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_E P_H>;
    bindings = <&m_gen_chord_reach>;
};
combo_gen_five {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_I P_V>;
    bindings = <&m_gen_chord_five>;
};
combo_gen_sing {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_I P_G>;
    bindings = <&m_gen_chord_sing>;
};
combo_gen_listen {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_I P_S P_N>;
    bindings = <&m_gen_chord_listen>;
};
combo_gen_six {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_I P_X>;
    bindings = <&m_gen_chord_six>;
};
combo_gen_table {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_A P_B P_L>;
    bindings = <&m_gen_chord_table>;
};
combo_gen_travel {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_R P_L>;
    bindings = <&m_gen_chord_travel>;
};
combo_gen_morning {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_O P_R P_N>;
    bindings = <&m_gen_chord_morning>;
};
combo_gen_ten {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_E P_N>;
    bindings = <&m_gen_chord_ten>;
};
combo_gen_simple {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_I P_E>;
    bindings = <&m_gen_chord_simple>;
};
combo_gen_several {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_E P_V P_L>;
    bindings = <&m_gen_chord_several>;
};
combo_gen_vowel {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_V P_O P_W>;
    bindings = <&m_gen_chord_vowel>;
};
combo_gen_toward {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_O P_W P_A>;
    bindings = <&m_gen_chord_toward>;
};
combo_gen_lay {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_A P_Y>;
    bindings = <&m_gen_chord_lay>;
};
combo_gen_against {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_G P_I P_N>;
    bindings = <&m_gen_chord_against>;
};
combo_gen_pattern {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_A P_N>;
    bindings = <&m_gen_chord_pattern>;
};
combo_gen_slow {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_L P_W>;
    bindings = <&m_gen_chord_slow>;
};
combo_gen_center {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_E P_N>;
    bindings = <&m_gen_chord_center>;
};
combo_gen_love {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_O P_V>;
    bindings = <&m_gen_chord_love>;
};
combo_gen_person {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_E P_R P_O P_N>;
    bindings = <&m_gen_chord_person>;
};
combo_gen_money {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_O P_E>;
    bindings = <&m_gen_chord_money>;
};
combo_gen_road {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_O P_A>;
    bindings = <&m_gen_chord_road>;
};
combo_gen_map {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_A P_P>;
    bindings = <&m_gen_chord_map>;
};
combo_gen_science {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_C P_I P_N>;
    bindings = <&m_gen_chord_science>;
};
combo_gen_rule {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_U P_L P_E>;
    bindings = <&m_gen_chord_rule>;
};
combo_gen_govern {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_G P_O P_V>;
    bindings = <&m_gen_chord_govern>;
};
combo_gen_cold {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_O P_L P_D>;
    bindings = <&m_gen_chord_cold>;
};
combo_gen_notice {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_N P_O P_T>;
    bindings = <&m_gen_chord_notice>;
};
combo_gen_voice {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_V P_O P_I P_C>;
    bindings = <&m_gen_chord_voice>;
};
combo_gen_fall {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_A P_L>;
    bindings = <&m_gen_chord_fall>;
};
combo_gen_power {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_O P_W>;
    bindings = <&m_gen_chord_power>;
};
combo_gen_town {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_O P_W P_N>;
    bindings = <&m_gen_chord_town>;
};
combo_gen_fine {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_I P_E>;
    bindings = <&m_gen_chord_fine>;
};
combo_gen_certain {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_E P_I>;
    bindings = <&m_gen_chord_certain>;
};
combo_gen_unit {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_U P_N P_I P_T>;
    bindings = <&m_gen_chord_unit>;
};
combo_gen_cry {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_R P_Y>;
    bindings = <&m_gen_chord_cry>;
};
combo_gen_dark {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_A P_K>;
    bindings = <&m_gen_chord_dark>;
};
combo_gen_machine {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_A P_H>;
    bindings = <&m_gen_chord_machine>;
};
combo_gen_note {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_N P_O P_T P_E>;
    bindings = <&m_gen_chord_note>;
};
combo_gen_wait {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_A P_I>;
    bindings = <&m_gen_chord_wait>;
};
combo_gen_figure {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_I P_G>;
    bindings = <&m_gen_chord_figure>;
};
combo_gen_box {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_O P_X>;
    bindings = <&m_gen_chord_box>;
};
combo_gen_field {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_I P_E P_L>;
    bindings = <&m_gen_chord_field>;
};
combo_gen_correct {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_O P_R P_E>;
    bindings = <&m_gen_chord_correct>;
};
combo_gen_able {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_B P_L P_E>;
    bindings = <&m_gen_chord_able>;
};
combo_gen_pound {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_O P_D>;
    bindings = <&m_gen_chord_pound>;
};
combo_gen_done {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_O P_N P_E>;
    bindings = <&m_gen_chord_done>;
};
combo_gen_beauty {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_E P_U>;
    bindings = <&m_gen_chord_beauty>;
};
combo_gen_drive {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_R P_I P_V>;
    bindings = <&m_gen_chord_drive>;
};
combo_gen_stood {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_T P_O P_D>;
    bindings = <&m_gen_chord_stood>;
};
combo_gen_contain {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_O P_T>;
    bindings = <&m_gen_chord_contain>;
};
combo_gen_front {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_R P_O P_N>;
    bindings = <&m_gen_chord_front>;
};
combo_gen_teach {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_E P_A P_H>;
    bindings = <&m_gen_chord_teach>;
};
combo_gen_week {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_E P_K>;
    bindings = <&m_gen_chord_week>;
};
combo_gen_final {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_I P_A>;
    bindings = <&m_gen_chord_final>;
};
combo_gen_green {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_G P_R P_N>;
    bindings = <&m_gen_chord_green>;
};
combo_gen_quick {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_Q P_U P_C>;
    bindings = <&m_gen_chord_quick>;
};
combo_gen_develop {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_E P_L>;
    bindings = <&m_gen_chord_develop>;
};
combo_gen_sleep {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_L P_E P_P>;
    bindings = <&m_gen_chord_sleep>;
};
combo_gen_warm {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_A P_M>;
    bindings = <&m_gen_chord_warm>;
};
combo_gen_minute {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_I P_T>;
    bindings = <&m_gen_chord_minute>;
};
combo_gen_strong {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_T P_O P_N>;
    bindings = <&m_gen_chord_strong>;
};
combo_gen_special {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_P P_E P_I>;
    bindings = <&m_gen_chord_special>;
};
combo_gen_mind {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_I P_D>;
    bindings = <&m_gen_chord_mind>;
};
combo_gen_behind {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_E P_H>;
    bindings = <&m_gen_chord_behind>;
};
combo_gen_clear {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_L P_E>;
    bindings = <&m_gen_chord_clear>;
};
combo_gen_tail {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_A P_I>;
    bindings = <&m_gen_chord_tail>;
};
combo_gen_produce {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_R P_O P_D P_U>;
    bindings = <&m_gen_chord_produce>;
};
combo_gen_lot {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_O P_T>;
    bindings = <&m_gen_chord_lot>;
};
combo_gen_nothing {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_N P_O P_T P_H>;
    bindings = <&m_gen_chord_nothing>;
};
combo_gen_course {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_O P_U P_R>;
    bindings = <&m_gen_chord_course>;
};
combo_gen_stay {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_T P_Y>;
    bindings = <&m_gen_chord_stay>;
};
combo_gen_wheel {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_H P_E P_L>;
    bindings = <&m_gen_chord_wheel>;
};
combo_gen_force {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_O P_R P_C>;
    bindings = <&m_gen_chord_force>;
};
combo_gen_blue {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_L P_E>;
    bindings = <&m_gen_chord_blue>;
};
combo_gen_object {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_O P_B P_J P_E>;
    bindings = <&m_gen_chord_object>;
};
combo_gen_decide {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_E P_I>;
    bindings = <&m_gen_chord_decide>;
};
combo_gen_surface {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_U P_R P_F>;
    bindings = <&m_gen_chord_surface>;
};
combo_gen_deep {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_E P_P>;
    bindings = <&m_gen_chord_deep>;
};
combo_gen_foot {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_F P_O P_T>;
    bindings = <&m_gen_chord_foot>;
};
combo_gen_busy {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_U P_S>;
    bindings = <&m_gen_chord_busy>;
};
combo_gen_record {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_E P_O>;
    bindings = <&m_gen_chord_record>;
};
combo_gen_possible {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_O P_S P_I>;
    bindings = <&m_gen_chord_possible>;
};
combo_gen_plane {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_L P_A P_N P_E>;
    bindings = <&m_gen_chord_plane>;
};
combo_gen_dry {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_D P_R P_Y>;
    bindings = <&m_gen_chord_dry>;
};
combo_gen_wonder {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_O P_N P_D P_E>;
    bindings = <&m_gen_chord_wonder>;
};
combo_gen_thousand {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_T P_H P_O P_S P_A>;
    bindings = <&m_gen_chord_thousand>;
};
combo_gen_ago {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_G P_O>;
    bindings = <&m_gen_chord_ago>;
};
combo_gen_ran {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_R P_A P_N>;
    bindings = <&m_gen_chord_ran>;
};
combo_gen_check {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_C P_H P_E>;
    bindings = <&m_gen_chord_check>;
};
combo_gen_game {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_G P_A P_M>;
    bindings = <&m_gen_chord_game>;
};
combo_gen_shape {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_H P_A>;
    bindings = <&m_gen_chord_shape>;
};
combo_gen_miss {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_M P_I P_S>;
    bindings = <&m_gen_chord_miss>;
};
combo_gen_brought {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_R P_O>;
    bindings = <&m_gen_chord_brought>;
};
combo_gen_snow {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_S P_N P_W>;
    bindings = <&m_gen_chord_snow>;
};
combo_gen_bring {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_B P_R P_I P_N>;
    bindings = <&m_gen_chord_bring>;
};
combo_gen_perhaps {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_P P_E P_H>;
    bindings = <&m_gen_chord_perhaps>;
};
combo_gen_weight {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_W P_E P_I>;
    bindings = <&m_gen_chord_weight>;
};
combo_gen_language {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_L P_A P_N P_U>;
    bindings = <&m_gen_chord_language>;
};
combo_gen_among {
    timeout-ms = <COMBO_TIMEOUT>;
    key-positions = <P_A P_M P_O P_G>;
    bindings = <&m_gen_chord_among>;
};

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
            &kp F1         &kp F2      &kp F3      &kp F4       &kp F5                                                                                          &kp F6       &kp F7      &kp F8      &kp F9        &kp F10
            &none          &kp N1      &kp N2      &kp N3       &kp N4       &kp N5                                                                     &kp N6  &kp N7       &kp N8      &kp N9      &kp N0        &none
            &kp TAB        &kp Q       &kp W       &kp E        &kp R        &kp T                                                                      &kp Y   &kp U        &kp I       &kp O       &kp P         &none
            &kp ESC        &hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHIFT F &kp G                                                                      &kp H   &hm RSHIFT J &hm RCTRL K &hm RALT L  &hm LGUI SEMI &kp SQT
            &none          &kp Z       &kp X       &kp C        &kp V        &kp B   &mo LOWER   &kp LCTRL   &layer_td  &kp LGUI  &kp RCTRL &mo SYMBOL  &kp N   &kp M        &kp COMMA   &kp DOT     &kp FSLH      &none
            &magic MAGIC 0 &none       &none       &none        &kp DELETE           &kp ENTER   &kp TAB     &kp LALT   &kp RALT  &kp RET   &kp SPACE           &kp BSPC     &none       &none       &none         &none
            >;
        };

        symbol_layer {
            bindings = <
            &none          &none         &none         &none      &none                                                                                          &none        &none      &none       &none     &none
            &none          &kp GRAVE     &kp LPAR      &kp RPAR   &kp SEMI    &kp COMMA                                                                 &none    &none        &none      &none       &none     &none
            &kp EXCL       &kp LBRC      &kp SQT       &kp DQT    &kp RBRC    &kp QMARK                                                                 &none    &none        &none      &none       &none     &none
            &kp HASH       &kp CARET     &kp KP_EQUAL  &kp UNDER  &kp DLLR    &kp STAR                                                                  &none    &none        &none      &none       &none     &none
            &kp TILDE      &kp LT        &kp PIPE      &kp MINUS  &kp GT      &kp FSLH   &kp BSLH     &kp DOT     &kp STAR   &none     &none     &none  &none    &none        &none      &none       &none     &none
            &kp AT         &kp AMPS      &kp LBKT      &kp RBKT   &kp PLUS               &kp PRCNT    &kp COLON   &kp SEMI   &none     &none     &none           &none        &none      &none       &none     &none
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_UP                                                                             &kp PRCNT    &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
    };
};
